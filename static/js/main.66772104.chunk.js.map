{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","partialFilter","filterReducer","query","status","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppSelector","useDispatch","useSelector","TodoList","dispatch","renderedTodos","title","toLowerCase","includes","completed","length","className","map","id","classNames","onClick","currentTodoActions","TodoFilter","onSubmit","event","preventDefault","value","onChange","filterActions","currentTarget","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","isLoading","setIsLoading","user","setUser","useEffect","fetchUser","a","userId","fetchedUser","href","email","name","App","fetchTodos","fetchedTodos","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.66772104.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n    case 'currentTodo/SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype Filter = {\n  query: string,\n  status: Status,\n};\n\ntype SetFilterAction = {\n  type: 'filter/SET',\n  payload: Filter,\n};\n\ntype UpdateFilterAction = {\n  type: 'filter/UPDATE',\n  payload: Partial<Filter>,\n};\n\nconst setFilter = (filter: Filter): SetFilterAction => ({\n  type: 'filter/SET',\n  payload: filter,\n});\n\nconst updateFilter = (partialFilter: Partial<Filter>): UpdateFilterAction => ({\n  type: 'filter/UPDATE',\n  payload: partialFilter,\n});\n\nexport const actions = { setFilter, updateFilter };\n\ntype State = Filter;\ntype Action = SetFilterAction | UpdateFilterAction;\n\nconst filterReducer = (\n  state: State = { query: '', status: 'all' },\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/SET':\n      return action.payload;\n    case 'filter/UPDATE':\n      return {\n        ...state,\n        ...action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET',\n  payload: Todo[],\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype State = Todo[];\ntype Action = SetTodosAction;\n\nconst todosReducer = (\n  state: State = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const { query, status } = useAppSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  const statusPredicate = (todo: Todo) => {\n    switch (status) {\n      case 'active':\n        return !todo.completed;\n      case 'completed':\n        return todo.completed;\n      default:\n        return true;\n    }\n  };\n\n  const renderedTodos = todos\n    .filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()))\n    .filter(statusPredicate);\n\n  return (\n    <>\n      {renderedTodos.length === 0 ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {renderedTodos.map((todo) => (\n              <tr data-cy=\"todo\" key={todo.id}>\n                <td className=\"is-vcentered\">\n                  {todo.id}\n                </td>\n\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={classNames(todo.completed ? 'has-text-success' : 'has-text-danger')}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => dispatch(currentTodoActions.setTodo(todo))}\n                  >\n                    <span className=\"icon\">\n                      <i\n                        className={classNames(\n                          'far',\n                          currentTodo && currentTodo.id === todo.id ? 'fa-eye-slash' : 'fa-eye',\n                        )}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useDispatch();\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const handleStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(\n      filterActions.updateFilter(\n        { status: event.currentTarget.value as Status },\n      ),\n    );\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.updateFilter(\n      { query: event.currentTarget.value },\n    ));\n  };\n\n  const clearQuery = () => {\n    dispatch(filterActions.updateFilter({ query: '' }));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleStatusChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          value={query}\n          placeholder=\"Search...\"\n          onChange={handleInputChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query.length > 0 && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearQuery}\n              aria-label=\"Clear Search\"\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { useAppSelector } from '../../app/hooks';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState<User>();\n  const dispatch = useDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      if (!currentTodo) {\n        return;\n      }\n\n      setIsLoading(true);\n\n      try {\n        const fetchedUser = await getUser(currentTodo.userId);\n\n        setUser(fetchedUser);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(currentTodoActions.removeTodo())}\n              aria-label=\"Close Modal\"\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p\n              className=\"block\"\n              data-cy=\"modal-title\"\n            >\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n              <a\n                href={`mailto:${user?.email}`}\n              >\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const dispatch = useDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useAppSelector(state => state.todos);\n\n  useEffect(() => {\n    const fetchTodos = async () => {\n      setIsLoading(true);\n      try {\n        const fetchedTodos = await getTodos();\n\n        dispatch(todosActions.setTodos(fetchedTodos));\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchTodos();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}